[tool.poetry]
name = "salesforce-ai-colleague"
version = "0.2.0"
description = "AI-powered Salesforce metadata intelligence platform with semantic analysis and dependency mapping - Python 3.11+ Edition"
authors = ["Zhi Jun <your-email@company.com>"]
readme = "README.md"
packages = [{include = "salesforce_ai_colleague", from = "src"}]
license = "MIT"
keywords = ["salesforce", "ai", "metadata", "analysis", "llm", "graphrag"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

[tool.poetry.dependencies]
# Enforce Python 3.11+ for modern features
python = "^3.11"

# Core dependencies with version constraints
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"
python-dotenv = "^1.0.0"
requests = "^2.31.0"
click = "^8.1.7"
rich = "^13.7.0"

# LLM and AI stack
langchain = "^0.1.0"
langchain-text-splitters = "^0.0.1"

# LLM Providers (optional)
google-generativeai = {version = "^0.3.2", optional = true}
openai = {version = "^1.6.0", optional = true}
anthropic = {version = "^0.8.1", optional = true}

# Data processing and storage
chromadb = "^0.4.22"
numpy = "^1.24.0"
pandas = "^2.1.0"
xmltodict = "^0.13.0"
simple-salesforce = "^1.12.6"

# Graph and visualization
networkx = "^3.2.0"
plotly = "^5.17.0"
matplotlib = "^3.8.0"
seaborn = "^0.13.0"

# Async and web
aiohttp = "^3.9.0"
tenacity = "^8.2.0"

# Neo4j
neo4j = "^5.15.0"

# XML/HTML processing
beautifulsoup4 = "^4.12.2"
lxml = "^4.9.3"

# Type checking
typing-extensions = "^4.8.0"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"

# Code quality
black = "^23.12.0"
isort = "^5.13.0"
flake8 = "^6.1.0"
mypy = "^1.8.0"
ruff = "^0.1.8"

# Documentation
sphinx = "^7.2.0"
sphinx-rtd-theme = "^2.0.0"

# Git hooks
pre-commit = "^3.6.0"

[tool.poetry.group.llm]
optional = true

[tool.poetry.group.llm.dependencies]
google-generativeai = "^0.3.2"
openai = "^1.6.0"
anthropic = "^0.8.1"

[tool.poetry.extras]
gemini = ["google-generativeai"]
openai = ["openai"]
anthropic = ["anthropic"]
all-llm = ["google-generativeai", "openai", "anthropic"]

[tool.poetry.scripts]
ai-colleague = "src.main:cli"
salesforce-analyze = "src.main:cli"

[build-system]
requires = ["poetry-core>=1.8.0"]
build-backend = "poetry.core.masonry.api"

# Modern Python 3.11+ configuration
[tool.black]
line-length = 88
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | \.ruff_cache
  | build
  | dist
  | node_modules
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["salesforce_ai_colleague", "src"]
known_third_party = ["pydantic", "click", "rich", "langchain"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "PL",  # pylint
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "PLR0912", # too many branches
    "PLR0913", # too many arguments
    "PLR0915", # too many statements
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"test_*.py" = ["PLR2004"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "test_*.py", "*_test.py"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection for tests

[tool.pydocstyle]
convention = "google"
add-ignore = "D100,D104,D105,D107"  # Allow missing docstrings in some cases 